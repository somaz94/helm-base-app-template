# Default values for ke-use-nfs-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
version: ""

# Environment setting - automatically injects ENVIRONMENT variable to both main container and init containers
# Example: environment: "staging" will add ENVIRONMENT="staging" to container env vars
environment: ""

image:
  repository: harbor.somaz.link/somaz/game
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imageCredentials:
  enabled: true
  registry: https://harbor.concrit.us
  username: robot$gitlab
  password: 8IaKfrhwd9CBE5sv9JlgfsT6crMGM0Pm
  name: harbor-robot-secret

imagePullSecrets:
  - name: harbor-robot-secret

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  name: base-ingress
  enabled: false

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
readinessProbe: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

strategy:
  enabled: false
  config:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1    # Maximum number of pods that can be created above the desired number of pods
      maxUnavailable: "50%"  # Maximum number of unavailable pods during the update

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

rbac:
  enabled: false
#   serviceAccountName: "" # Leave empty to use base.fullname as default
#   # role example
#   role:
#     name: cert-job-manager-base
#     resources:
#       - apiGroups: ["cert-manager.io"]
#         resources: ["certificaterequests"]
#         verbs: ["get", "list", "watch", "delete"]
#       - apiGroups: ["batch"]
#         resources: ["jobs"]
#         verbs: ["get", "list", "watch", "delete"]
#   roleBinding:
#     name: cert-job-manager-binding-base

nodeSelector: {}

tolerations: []

affinity: {}

revisionHistoryLimit: 1

envConfig: {}
  # NODE_ENV: base

configs:
  enabled: false
  # # example configmap
  # items:
  #   - name: app-config
  #     datas:
  #       APP_ENV: "production"
  #       DEBUG: "false"
  #   - name: debug-config
  #     datas:
  #       APP_ENV: "development"
  #       DEBUG: "true"

# Init Containers Setting
initContainers:
  enabled: false
  # items:
  #   - name: game-data-downloader
  #     image: alpine:latest
  #     imagePullPolicy: IfNotPresent
  #     command:
  #       - /bin/sh
  #       - -c
  #       - |
  #         apk add --no-cache wget
          
  #         # 로그 디렉토리 생성
  #         mkdir -p /app/init
  #         LOG_FILE="/app/init/download.log"
          
  #         echo "Downloading game data files for environment: $ENVIRONMENT"
  #         echo "Base URL: $FILE_SERVER_URL"
          
  #         # 로그 시작
  #         echo "=== Game Data Download Log ===" > $LOG_FILE
  #         echo "Start Time: $(date)" >> $LOG_FILE
  #         echo "Environment: $ENVIRONMENT" >> $LOG_FILE
  #         echo "File Server URL: $FILE_SERVER_URL" >> $LOG_FILE
  #         echo "" >> $LOG_FILE
          
  #         # Data 다운로드
  #         echo "=== Downloading data files... ===" >> $LOG_FILE
  #         wget -r -np -nH --cut-dirs=4 \
  #              --no-check-certificate \
  #              --quiet \
  #              -P /app/data/ \
  #              -A "*.json" \
  #              "$FILE_SERVER_URL/projectm/$ENVIRONMENT/server/data/" 2>/dev/null
          
  #         echo "Data download completed. Files downloaded:" >> $LOG_FILE
  #         find /app/data -name "*.json" | sed 's|.*/||' | sort >> $LOG_FILE
  #         echo "" >> $LOG_FILE
          
  #         # Version 다운로드
  #         echo "=== Downloading version files... ===" >> $LOG_FILE
  #         wget -r -np -nH --cut-dirs=4 \
  #              --no-check-certificate \
  #              --quiet \
  #              -A "*.json" \
  #              -P /app/version/ \
  #              "$FILE_SERVER_URL/projectm/$ENVIRONMENT/server/version/" 2>/dev/null
          
  #         echo "Version download completed. Files downloaded:" >> $LOG_FILE
  #         find /app/version -type f | sed 's|.*/||' | sort >> $LOG_FILE
          
  #         DATA_COUNT=$(find /app/data -name '*.json' | wc -l)
  #         VERSION_COUNT=$(find /app/version -type f | wc -l)
          
  #         echo "Game data download completed for $ENVIRONMENT!"
  #         echo "Data files: $DATA_COUNT"
  #         echo "Version files: $VERSION_COUNT"
  #         echo "Log saved to: $LOG_FILE"
          
  #         # 로그 마무리
  #         echo "" >> $LOG_FILE
  #         echo "=== Download Summary ===" >> $LOG_FILE
  #         echo "Data files: $DATA_COUNT" >> $LOG_FILE
  #         echo "Version files: $VERSION_COUNT" >> $LOG_FILE
  #         echo "End Time: $(date)" >> $LOG_FILE
  #         echo "Status: COMPLETED" >> $LOG_FILE
  #     env:
  #       - name: FILE_SERVER_URL
  #         value: "https://file-server.concrit.us"
  #     volumeMounts:
  #       - name: game-data-volume
  #         mountPath: /app/data
  #       - name: game-version-volume
  #         mountPath: /app/version
  #       - name: init-log-volume
  #         mountPath: /app/init
  #     resources:
  #       requests:
  #         memory: "64Mi"
  #         cpu: "50m"
  #       limits:
  #         memory: "128Mi"
  #         cpu: "100m"

# EmptyDir Volumes Setting
emptyDirVolumes:
  enabled: false
  # items:
  #   - name: game-data-volume
  #     mountPath: /app/data
  #     readOnly: true
  #     sizeLimit: "1Gi"
  #   - name: game-version-volume
  #     mountPath: /app/version
  #     readOnly: true
  #     sizeLimit: "100Mi"
  #   - name: init-log-volume
  #     mountPath: /app/init
  #     readOnly: true
  #     sizeLimit: "10Mi"

persistentVolumes:
  enabled: false
  # items:
  #   - name: pv-a
  #     storage: 5Gi
  #     volumeMode: Filesystem
  #     accessModes:
  #       - ReadWriteMany
  #     reclaimPolicy: Retain
  #     storageClassName: nfs-client
  #     path: /data/dev-a
  #     server: 10.10.10.5
  #   - name: pv-b
  #     storage: 10Gi
  #     volumeMode: Filesystem
  #     accessModes:
  #       - ReadWriteMany
  #     reclaimPolicy: Delete
  #     storageClassName: nfs-client
  #     path: /data/dev-b
  #     server: 10.10.10.5

persistentVolumeClaims:
  enabled: false
  # items:
  #   - name: pvc-a
  #     annotations:
  #       nfs.io/storage-path: "test-path" # storage path : ${.PVC.namespace}/${.PVC.annotations.nfs.io/storage-path} use dynamic provisioner
  #     accessModes:
  #       - ReadWriteOnce
  #     storageClassName: nfs-client
  #     storage: 5Gi
  #     mountPath: /app/data
  #     selector:
  #       volumeName: pv-a
  #   - name: pvc-b
  #     annotations:
  #       nfs.io/storage-path: "test2-path"
  #     accessModes:
  #       - ReadWriteOnce
  #     storageClassName: nfs-client
  #     storage: 5Gi
  #     mountPath: /app/data

# Extra volumes to add to the deployment
extraVolumes: []
  # - name: extra-volume
  #   emptyDir: {}
  # - name: config-volume
  #   configMap:
  #     name: special-config

# Extra volume mounts to add to the container
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /mnt/extra-volume
  # - name: config-volume
  #   mountPath: /etc/config

# AWS
certificate:
  enabled: false
  # example certificate
  # secretName: base-tls
  # commonName: base.com
  # duration: 2160h0m0s # 90d
  # renewBefore: 720h0m0s # 30d
  # dnsNames:
  # - base.com
  # issuerName: route53-issuer # issuer name
  # issuerKind: ClusterIssuer # issuer kind

# # GCP
# certificate:
#   # example certificate
#   # secretName: base-tls
#   # commonName: base.com
#   # duration: 2160h0m0s # 90d
#   # renewBefore: 720h0m0s # 30d
#   # dnsNames:
#   # - base.com
#   # issuerName: clouddns-issuer # issuer name
#   # issuerKind: ClusterIssuer # issuer kind
  
certCleanup:
  enabled: false
  # CronJobName: cert-cleanup-cronjob-base
  # olderThanDays: 100
  # YesterDays: 1

