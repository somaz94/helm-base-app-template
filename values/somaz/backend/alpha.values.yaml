# Default values for base-aws.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 2
# version: 1a2b3c4d

clientVersion:
  # multiple main versions for A/B testing ex. main: ["0.0.1", "0.1.0", "0.0.2"], single main versions for A/B testing: ex. main: ["0.0.1"]
  main: ["0.1.0"]
  review: ["0.1.1"]

# Service name variables
serviceNames:
  main: "alpha-somaz-game"
  review: "review-somaz-game"

# Rule name variables
ruleNames:
  main: "rule-alpha-somaz-game"
  review: "rule-alpha-somaz-game-review"

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: 123456789012.dkr.ecr.us-east-1.amazonaws.com/somaz/game
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "9e87f654"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: "alpha-somaz-game"
fullnameOverride: "alpha-somaz-game"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80
  targetPort: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # Ingress Group - Share single ALB
    alb.ingress.kubernetes.io/group.name: somaz-shared-alb
    alb.ingress.kubernetes.io/group.order: "3" # 1-1000 configurable, lower number has higher priority
    # Health check path configuration
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    # # Multi-version support example: ["0.1.0","0.1.1","0.1.2"] , changed to template dynamic processing
    # alb.ingress.kubernetes.io/conditions.rule-alpha-somaz-game: |
    #   [{"field":"http-header","httpHeaderConfig":{"httpHeaderName":"Client-Version","values":["0.0.1","0.1.0"]}}]
    # alb.ingress.kubernetes.io/actions.rule-alpha-somaz-game: |
    #   {"type":"forward","forwardConfig":{"targetGroups":[{"serviceName":"alpha-somaz-game","servicePort":"80","weight":100}]}}
    # Additional ALB settings
    alb.ingress.kubernetes.io/load-balancer-name: somaz-shared-alb-loadbalancer
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]' # Remove HTTP (CDN Origin uses HTTPS only)
    # ACM certificate settings (ALB for us-east-1)
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/abcd1234-5678-90ef-ghij-klmnopqrstuv
    # CDN optimization settings
    alb.ingress.kubernetes.io/target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=false
    # Origin identification tag
    alb.ingress.kubernetes.io/tags: "Purpose=CDN-Origin"
  hosts:
    - host: alpha-game.somaz.example.com # Domain that CloudFront forwards via Host header
      paths:
        - path: /
          pathType: Prefix
          useAnnotation: true
          serviceName: rule-alpha-somaz-game

# Review Ingress configuration (for app store review)
ingressReview:
  enabled: true # Change to true only when needed
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # Ingress Group - Share single ALB
    alb.ingress.kubernetes.io/group.name: somaz-shared-alb
    alb.ingress.kubernetes.io/group.order: "4" # health(1), api-docs(2), main(3), review(4)
    # Health check path configuration
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    # # Review (for app store review) , changed to template dynamic processing
    # alb.ingress.kubernetes.io/conditions.rule-alpha-somaz-game-review: |
    #   [{"field":"http-header","httpHeaderConfig":{"httpHeaderName":"Client-Version","values":["0.1.1"]}}]
    # alb.ingress.kubernetes.io/actions.rule-alpha-somaz-game-review: |
    #   {"type":"forward","forwardConfig":{"targetGroups":[{"serviceName":"review-somaz-game","servicePort":"80","weight":100}]}}
    # Common ALB settings
    alb.ingress.kubernetes.io/load-balancer-name: somaz-shared-alb-loadbalancer
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/abcd1234-5678-90ef-ghij-klmnopqrstuv
    alb.ingress.kubernetes.io/target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=false
    alb.ingress.kubernetes.io/tags: "Purpose=CDN-Origin"
  hosts:
    - host: alpha-game.somaz.example.com
      paths:
        - path: /
          pathType: Prefix
          useAnnotation: true
          serviceName: rule-alpha-somaz-game-review

# Health Ingress configuration
ingressHealth:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # Ingress Group - Share single ALB
    alb.ingress.kubernetes.io/group.name: somaz-shared-alb
    alb.ingress.kubernetes.io/group.order: "1" # High priority (higher than existing)
    # Health check path configuration
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    # Health check access (no header conditions)
    alb.ingress.kubernetes.io/conditions.rule-alpha-health: |
      [{"field":"path-pattern","pathPatternConfig":{"values":["/health*"]}}]
    alb.ingress.kubernetes.io/actions.rule-alpha-health: |
      {"type":"forward","forwardConfig":{"targetGroups":[{"serviceName":"alpha-somaz-game","servicePort":"80","weight":100}]}}
    # Common ALB settings
    alb.ingress.kubernetes.io/load-balancer-name: somaz-shared-alb-loadbalancer
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/abcd1234-5678-90ef-ghij-klmnopqrstuv
    alb.ingress.kubernetes.io/target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=false
    alb.ingress.kubernetes.io/tags: "Purpose=CDN-Origin"
  hosts:
    - host: alpha-game.somaz.example.com
      paths:
        - path: /health
          pathType: Prefix
          useAnnotation: true
          serviceName: rule-alpha-health

# API Docs Ingress configuration
ingressApiDocs:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    # Ingress Group - Share single ALB
    alb.ingress.kubernetes.io/group.name: somaz-shared-alb
    alb.ingress.kubernetes.io/group.order: "2" # Second priority
    # Health check path configuration
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    # API docs access (no header conditions)
    alb.ingress.kubernetes.io/conditions.rule-alpha-apidocs: |
      [{"field":"path-pattern","pathPatternConfig":{"values":["/api-docs*"]}}]
    alb.ingress.kubernetes.io/actions.rule-alpha-apidocs: |
      {"type":"forward","forwardConfig":{"targetGroups":[{"serviceName":"alpha-somaz-game","servicePort":"80","weight":100}]}}
    # Common ALB settings
    alb.ingress.kubernetes.io/load-balancer-name: somaz-shared-alb-loadbalancer
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:123456789012:certificate/abcd1234-5678-90ef-ghij-klmnopqrstuv
    alb.ingress.kubernetes.io/target-group-attributes: |
      deregistration_delay.timeout_seconds=30,
      stickiness.enabled=false
    alb.ingress.kubernetes.io/tags: "Purpose=CDN-Origin"
  hosts:
    - host: alpha-game.somaz.example.com
      paths:
        - path: /api-docs
          pathType: Prefix
          useAnnotation: true
          serviceName: rule-alpha-apidocs

revisionHistoryLimit: 1

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # Alpha test environment - 100 concurrent users, 2 replica baseline
  limits:
    cpu: 1000m # 1 CPU core
    memory: 2Gi # 2GB RAM
  requests:
    cpu: 100m # 0.5 CPU core
    memory: 1Gi # 1GB RAM

strategy:
  enabled: true
  config:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1 # Maximum number of pods that can be created above the desired number of pods
      maxUnavailable: "50%" # Maximum number of unavailable pods during the update

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe: {}
livenessProbe:
  httpGet:
    path: /health
    port: http
# readinessProbe: {}
readinessProbe:
  httpGet:
    path: /health
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

rbac:
  enabled: false

nodeSelector:
  eks.amazonaws.com/nodegroup: ExampleNodegroupBaseNodeGroupA-XY9ZAmuND3P3

tolerations: []

affinity: {}

envConfig:
  {}
  # NODE_ENV: base

configs:
  enabled: true
  items:
    - name: alpha-game-app-config
      datas:
        NODE_ENV: alpha
        SERVER_PORT: 8080

        # pub/sub Redis
        REDIS_HOST: alpha-somaz-redis.somaz.svc.cluster.local
        REDIS_PORT: 6379
        REDIS_NUMBER: 0

        # Session Redis
        SESSION_REDIS_HOST: somaz-redis-cluster-client.somaz.svc.cluster.local
        SESSION_REDIS_PORT: 6379
        SESSION_REDIS_NUMBER: 0
        SESSION_REDIS_CLUSTER_MODE: true
        SESSION_REDIS_TTL: 3600

        # User Level Lock redis
        USER_LEVEL_LOCK_ENABLED: true
        RED_LOCK_REDIS_HOST: somaz-redis-cluster-client.somaz.svc.cluster.local
        RED_LOCK_REDIS_PORT: 6379
        RED_LOCK_REDIS_NUMBER: 0
        RED_LOCK_REDIS_CLUSTER_MODE: true

        COMMON_DB_TYPE: mysql
        COMMON_DB_HOST: alpha-somaz-rds-aurora.cluster-example123.us-east-1.rds.amazonaws.com
        # COMMON_DB_HOST: demo-cluster.example.us
        COMMON_DB_PORT: 3306
        # COMMON_DB_PORT: 30636
        COMMON_DB_NAME: common
        COMMON_DB_DATABASE: alpha_common
        COMMON_DB_USER: dbuser
        COMMON_DB_PASSWORD: example123!
        GAME_DB_TYPE: mysql
        GAME_DB_HOST: alpha-somaz-rds-aurora.cluster-example123.us-east-1.rds.amazonaws.com
        # GAME_DB_HOST: demo-cluster.example.us
        GAME_DB_PORT: 3306
        # GAME_DB_PORT: 30636
        GAME_DB_NAME: game
        GAME_DB_DATABASE: alpha_game
        GAME_DB_USER: dbuser
        GAME_DB_PASSWORD: example123!
        CHECK_VERSION: false
        CHECK_REQUEST_SEQUENCE: false
        BATTLE_SERVER_URL: http://alpha-somaz-battle.somaz.svc.cluster.local # <svc.name>.<namespace>.svc.<cluster_dns> current cluster dns = cluster.local

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

# EFS related configuration
efs:
  persistentVolumes:
    enabled: true
    items:
      - name: "alpha-somaz-game-app-data-pv"
        fileSystemId: "fs-0example123abc456"
        accessPointId: "fsap-0example789def012" # Access Point ID created by Terraform
        storage: "5Gi"
        volumeMode: Filesystem
        accessModes:
          - ReadWriteMany
        reclaimPolicy: Retain
        storageClassName: "efs-sc"
      - name: "alpha-somaz-game-app-logs-pv"
        fileSystemId: "fs-0example123abc456"
        accessPointId: "fsap-0example456ghi789" # Access Point ID created by Terraform
        storage: "5Gi"
        volumeMode: Filesystem
        accessModes:
          - ReadWriteMany
        reclaimPolicy: Retain
        storageClassName: "efs-sc"
      - name: "alpha-somaz-game-app-version-pv"
        fileSystemId: "fs-0example123abc456"
        accessPointId: "fsap-0example012jkl345" # Access Point ID created by Terraform
        storage: "5Gi"
        volumeMode: Filesystem
        accessModes:
          - ReadWriteMany
        reclaimPolicy: Retain
        storageClassName: "efs-sc"

  persistentVolumeClaims:
    enabled: true
    items:
      - name: "alpha-somaz-game-app-data-pvc"
        accessModes:
          - ReadWriteMany
        storageClassName: "efs-sc"
        storage: "5Gi"
        mountPath: "/app/data"
        selector:
          volumeName: "alpha-somaz-game-app-data-pv"
      - name: "alpha-somaz-game-app-logs-pvc"
        accessModes:
          - ReadWriteMany
        storageClassName: "efs-sc"
        storage: "5Gi"
        mountPath: "/app/logs"
        selector:
          volumeName: "alpha-somaz-game-app-logs-pv"
      - name: "alpha-somaz-game-app-version-pvc"
        accessModes:
          - ReadWriteMany
        storageClassName: "efs-sc"
        storage: "5Gi"
        mountPath: "/app/version"
        selector:
          volumeName: "alpha-somaz-game-app-version-pv"